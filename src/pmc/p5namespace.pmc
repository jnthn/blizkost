/*
Copyright (C) 2009, Jonathan Worthington and friends

This file is distributed under the same terms as Parrot itself; see the
file LICENSE in the source root for details.

=head1 NAME

src/pmc/p5namespace.pmc - PMC that wraps a Perl 5 namespace

=head1 DESCRIPTION

These are the vtable functions for the P5Namespace class.

=cut

*/

#include "blizkost.h"

pmclass P5Namespace group blizkost_group dynpmc auto_attrs {
    ATTR struct blizkost_nexus *nexus;
    ATTR STRING *ns_name;

    VTABLE void init() {
        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_ILL_INHERIT,
            "P5Namespace values can only be created through an interpreter");
    }

/*

=item C<void mark()>

Mark GC-ables.

=cut

*/
    VTABLE void mark() {
        blizkost_nexus *nexus   = PARROT_P5NAMESPACE(SELF)->nexus;
        STRING         *ns_name = PARROT_P5NAMESPACE(SELF)->ns_name;

        Parrot_gc_mark_PObj_alive(interp, (PObj*)nexus->p5i);
        Parrot_gc_mark_PObj_alive(interp, (PObj*)ns_name);
    }

/*

=item C<PMC *find_method(STRING *name)>

Hands back a P5Invocation so we can call a method on the package.

=cut

*/
    VTABLE PMC *find_method(STRING *name) {
        blizkost_nexus *nexus   = PARROT_P5NAMESPACE(SELF)->nexus;
        PMC            *result;

        /* Make and return a P5Invocation object. */
        result = Parrot_pmc_new(interp, Parrot_pmc_get_type_str(interp, CONST_STRING(interp, "P5Invocation")));
        SETATTR_P5Invocation_nexus(interp, result, nexus);
        SETATTR_P5Invocation_name(interp, result, name);
        return result;
    }


/*

=item C<INTVAL isa(STRING *check)>

Override isa so we can pretend to inherit from NameSpace.

=cut

*/
    VTABLE INTVAL isa(STRING *check) {
        /* Lie about inheriting from NameSpace PMC. */
        if (Parrot_str_equal(interp, check, CONST_STRING(interp, "NameSpace")))
            return 1;
        return SUPER(check);
    }
}
