/*
Copyright (C) 2009, Jonathan Worthington and friends

This file is distributed under the same terms as Parrot itself; see the
file LICENSE in the source root for details.

=head1 NAME

src/pmc/p5scalar.pmc - pmc for Perl 5 array type

=head1 DESCRIPTION

These are the vtable functions for the P5Scalar class.

=cut

*/

#include "blizkost.h"

pmclass P5Scalar extends P5SV group blizkost_group dynpmc auto_attrs {

/*

=item C<INTVAL get_bool()>

Returns the boolean value of the SV.

=cut

*/

    VTABLE INTVAL get_bool() {
        return SELF.get_integer() ? 1 : 0;
    }

/*

=item C<INTVAL get_integer()>

Returns the integer value of the SV.

=cut

*/

    VTABLE INTVAL get_integer() {
        blizkost_nexus  *nexus = PARROT_P5SV(SELF)->nexus;
        SV              *sv    = PARROT_P5SV(SELF)->sv;
        dBNPERL;

        return SvIV(sv);
    }

/*

=item C<NUMVAL get_number()>

Returns the number value of the SV.

=cut

*/

    VTABLE FLOATVAL get_number() {
        blizkost_nexus  *nexus = PARROT_P5SV(SELF)->nexus;
        SV              *sv    = PARROT_P5SV(SELF)->sv;
        dBNPERL;

        return SvNV(sv);
    }

/*

=item C<STRING *get_string()>

Returns the string value of the SV.

=cut

*/
    VTABLE STRING *get_string() {
        blizkost_nexus  *nexus = PARROT_P5SV(SELF)->nexus;
        SV              *sv    = PARROT_P5SV(SELF)->sv;
        dBNPERL;

        char            *perl5_str;

        perl5_str = SvPVutf8_nolen(sv);
        return Parrot_str_new(interp, perl5_str, strlen(perl5_str));
    }

    VTABLE PMC *get_pmc_keyed(PMC *key) {
        blizkost_nexus  *nexus = PARROT_P5SV(SELF)->nexus;
        SV              *sv    = PARROT_P5SV(SELF)->sv;
        dBNPERL;

        PMC             *elpmc;
        SV              *rsv, *element;
        svtype          type;
        PMC             *nextkey = Parrot_key_next(interp, key);

        SvGETMAGIC(sv);

        if (!SvROK(sv))
            Parrot_ex_throw_from_c_args(interp, NULL,
                    EXCEPTION_INVALID_OPERATION,
                    "non-reference value used as aggregate");

        /* XXX handle overloading
           problem: we don't necessarily know whether to use @{} or %{}
           Austin suggests using whichever is overloaded, else @{} */
        rsv = SvRV(sv);
        type = SvTYPE(rsv);

        if (type == SVt_PVHV) {
            HE *hashent;
            SV *svkey;
            STRING *strkey = VTABLE_get_string(interp, key);
            /* XXX this is wrong.  UTF8, embedded nuls */
            char *ckey = Parrot_str_to_cstring(interp, strkey);
            ENTER;
            SAVETMPS;
            svkey = sv_2mortal(newSVpv(ckey, 0));
            mem_sys_free(ckey);
            hashent = hv_fetch_ent((HV*)rsv, svkey, 0, 0);
            element = hashent ? SvREFCNT_inc(HeVAL(hashent)) : NULL;
            FREETMPS;
            LEAVE;
        } else {
            Parrot_ex_throw_from_c_args(interp, NULL,
                    EXCEPTION_INVALID_OPERATION,
                    "non-hash reference used as aggregate");
        }

        if (element)
            elpmc = blizkost_wrap_sv(nexus, element);
        else
            elpmc = PMCNULL;

        SvREFCNT_dec(element);

        if (nextkey) {
            if (PMC_IS_NULL(elpmc))
                elpmc = Parrot_pmc_new(interp, enum_class_Undef);
            return VTABLE_get_pmc_keyed(interp, elpmc, nextkey);
        } else {
            return elpmc;
        }
    }

    VTABLE PMC *get_iter() {
        blizkost_nexus  *nexus = PARROT_P5SV(SELF)->nexus;
        SV              *sv    = PARROT_P5SV(SELF)->sv;
        dBNPERL;

        PMC             *elpmc;
        SV              *rsv, *element;
        svtype          type;

        ENTER;
        SAVETMPS;

        SvGETMAGIC(sv);

        if (!SvROK(sv))
            Parrot_ex_throw_from_c_args(interp, NULL,
                    EXCEPTION_INVALID_OPERATION,
                    "non-reference value used as aggregate");

        /* XXX handle overloading
           problem: we don't necessarily know whether to use @{} or %{}
           Austin suggests using whichever is overloaded, else @{} */
        rsv = SvRV(sv);
        type = SvTYPE(rsv);

        if (type == SVt_PVHV) {
            PMC *iter = Parrot_pmc_new_noinit(interp, Parrot_pmc_get_type_str(interp,
                    Parrot_str_new_constant(interp, "P5HashIter")));

            hv_iterinit((HV*) rsv);

            PObj_custom_mark_SET(iter);
            /* XXX this is a cheat */
            SETATTR_P5HashIter_backing_hash(interp, iter,
                    blizkost_wrap_sv(nexus, (SV*)rsv));
            SETATTR_P5HashIter_current_he(interp, iter, &blizkost_EMPTY);

            FREETMPS;
            LEAVE;
            return iter;
        } else {
            FREETMPS;
            LEAVE;
            Parrot_ex_throw_from_c_args(interp, NULL,
                    EXCEPTION_INVALID_OPERATION,
                    "non-hash reference used as aggregate");
        }
    }

/*

=item C<PMC *find_method(STRING *name)>

Hands back something that, when invoked, will try to call the method with
the given name on the given Perl 5 Scalar invocant.

=cut

*/
    VTABLE PMC *find_method(STRING *name) {
        blizkost_nexus  *nexus = PARROT_P5SV(SELF)->nexus;
        SV              *sv    = PARROT_P5SV(SELF)->sv;
        dBNPERL;

        PMC             *result;

        result = Parrot_pmc_new(interp, Parrot_pmc_get_type_str(interp, Parrot_str_new_constant(interp, "P5Invocation")));
        SETATTR_P5Invocation_nexus(interp, result, nexus);
        SETATTR_P5Invocation_name(interp, result, name);

        return result;
    }

/*

=item C<opcode_t *invoke(void *next)>

Attempts to invoke the target of a code reference.

=cut

*/
    VTABLE opcode_t *invoke(void *next) {
        blizkost_nexus  *nexus = PARROT_P5SV(SELF)->nexus;
        SV              *sv    = PARROT_P5SV(SELF)->sv;
        dBNPERL;

        PMC             *positional, *named, *results;

        PMC *ctx         = CURRENT_CONTEXT(interp);
        PMC *call_object = Parrot_pcc_get_signature(interp, ctx);
        PMC *ret_object;

        Parrot_pcc_fill_params_from_c_args(interp, call_object, "PsPns",
                &positional, &named);

        blizkost_call_in(nexus, sv, G_ARRAY, positional, named, &results);

        ret_object = Parrot_pcc_build_call_from_c_args(interp, call_object,
                "Pf", results);

        return blizkost_return_from_invoke(interp, next);
    }

/*

=item C<INTVAL can(STRING *name)>

Checks if a class can do a given method.

=cut

*/
    VTABLE INTVAL can(STRING *name) {
        blizkost_nexus  *nexus = PARROT_P5SV(SELF)->nexus;
        SV              *sv    = PARROT_P5SV(SELF)->sv;
        dBNPERL;

        INTVAL           result;
        char            *c_name;

        c_name = Parrot_str_to_cstring(interp, name);

        /* If it's not blessed, the answer is "no" right off. */
        if (!sv_isobject(sv))
            return 0;

        /* Otherwise, try UNIVERSAL::can. */
        {
            dSP;
            ENTER;
            SAVETMPS;
            PUSHMARK(SP);
            XPUSHs(sv);
            XPUSHs(sv_2mortal(newSVpv(c_name, strlen(c_name))));
            PUTBACK;
            call_pv("UNIVERSAL::can", G_SCALAR);
            SPAGAIN;
            result = POPi;
            PUTBACK;
            FREETMPS;
            LEAVE;
        }

        mem_sys_free(c_name);
        return result;
    }
}
